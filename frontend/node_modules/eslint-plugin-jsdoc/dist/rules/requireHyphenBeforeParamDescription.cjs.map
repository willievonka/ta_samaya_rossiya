{"version":3,"file":"requireHyphenBeforeParamDescription.cjs","names":["_iterateJsdoc","_interopRequireDefault","require","e","__esModule","default","_default","exports","iterateJsdoc","context","jsdoc","utils","mainCircumstance","tags","options","tgs","checkHyphens","jsdocTag","targetTagName","circumstance","always","desc","getTagDescription","trim","startsWithHyphen","test","hyphenNewline","lines","tokens","source","description","fixIt","replace","name","reportJSDoc","line","number","postName","forEachPreferredTag","tagEntries","Object","entries","tagName","preferredParamTag","getPreferredTagName","tag","some","tagNme","iterateAllJsdocs","meta","docs","url","fixable","schema","enum","type","additionalProperties","properties","anyOf","patternProperties","module"],"sources":["../../src/rules/requireHyphenBeforeParamDescription.js"],"sourcesContent":["import iterateJsdoc from '../iterateJsdoc.js';\n\nexport default iterateJsdoc(({\n  context,\n  jsdoc,\n  utils,\n}) => {\n  const [\n    mainCircumstance,\n    {\n      tags = null,\n    } = {},\n  ] = context.options;\n\n  const tgs = /**\n               * @type {null|\"any\"|{[key: string]: \"always\"|\"never\"}}\n               */ (tags);\n\n  /**\n   * @param {import('@es-joy/jsdoccomment').JsdocTagWithInline} jsdocTag\n   * @param {string} targetTagName\n   * @param {\"always\"|\"never\"} [circumstance]\n   * @returns {void}\n   */\n  const checkHyphens = (jsdocTag, targetTagName, circumstance = mainCircumstance) => {\n    const always = !circumstance || circumstance === 'always';\n    const desc = /** @type {string} */ (utils.getTagDescription(jsdocTag));\n    if (!desc.trim()) {\n      return;\n    }\n\n    const startsWithHyphen = (/^\\s*-/v).test(desc);\n    const hyphenNewline = (/^\\s*-\\n/v).test(desc);\n\n    let lines = 0;\n    for (const {\n      tokens,\n    } of jsdocTag.source) {\n      if (tokens.description) {\n        break;\n      }\n\n      lines++;\n    }\n\n    if (always && !hyphenNewline) {\n      if (!startsWithHyphen) {\n        let fixIt = true;\n        for (const {\n          tokens,\n        } of jsdocTag.source) {\n          if (tokens.description) {\n            tokens.description = tokens.description.replace(\n              /^(\\s*)/v, '$1- ',\n            );\n            break;\n          }\n\n          // Linebreak after name since has no description\n          if (tokens.name) {\n            fixIt = false;\n            break;\n          }\n        }\n\n        if (fixIt) {\n          utils.reportJSDoc(\n            `There must be a hyphen before @${targetTagName} description.`,\n            {\n              line: jsdocTag.source[0].number + lines,\n            },\n            () => {},\n          );\n        }\n      }\n    } else if (startsWithHyphen) {\n      utils.reportJSDoc(\n        always ?\n          `There must be no hyphen followed by newline after the @${targetTagName} name.` :\n          `There must be no hyphen before @${targetTagName} description.`,\n        {\n          line: jsdocTag.source[0].number + lines,\n        },\n        () => {\n          for (const {\n            tokens,\n          } of jsdocTag.source) {\n            if (tokens.description) {\n              tokens.description = tokens.description.replace(\n                /^\\s*-\\s*/v, '',\n              );\n              if (hyphenNewline) {\n                tokens.postName = '';\n              }\n\n              break;\n            }\n          }\n        },\n        true,\n      );\n    }\n  };\n\n  utils.forEachPreferredTag('param', checkHyphens);\n  if (tgs) {\n    const tagEntries = Object.entries(tgs);\n    for (const [\n      tagName,\n      circumstance,\n    ] of tagEntries) {\n      if (tagName === '*') {\n        const preferredParamTag = utils.getPreferredTagName({\n          tagName: 'param',\n        });\n        for (const {\n          tag,\n        } of jsdoc.tags) {\n          if (tag === preferredParamTag || tagEntries.some(([\n            tagNme,\n          ]) => {\n            return tagNme !== '*' && tagNme === tag;\n          })) {\n            continue;\n          }\n\n          utils.forEachPreferredTag(tag, (jsdocTag, targetTagName) => {\n            checkHyphens(\n              jsdocTag,\n              targetTagName,\n              /** @type {\"always\"|\"never\"} */ (circumstance),\n            );\n          });\n        }\n\n        continue;\n      }\n\n      utils.forEachPreferredTag(tagName, (jsdocTag, targetTagName) => {\n        checkHyphens(\n          jsdocTag,\n          targetTagName,\n          /** @type {\"always\"|\"never\"} */ (circumstance),\n        );\n      });\n    }\n  }\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Requires a hyphen before the `@param` description (and optionally before `@property` descriptions).',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-hyphen-before-param-description.md#repos-sticky-header',\n    },\n    fixable: 'code',\n    schema: [\n      {\n        description: `If the string is \\`\"always\"\\` then a problem is raised when there is no hyphen\nbefore the description. If it is \\`\"never\"\\` then a problem is raised when there\nis a hyphen before the description. The default value is \\`\"always\"\\`.\n\nEven if hyphens are set to \"always\" appear after the tag name, they will\nactually be forbidden in the event that they are followed immediately by\nthe end of a line (this will otherwise cause Visual Studio Code to display\nincorrectly).`,\n        enum: [\n          'always', 'never',\n        ],\n        type: 'string',\n      },\n      {\n        additionalProperties: false,\n        description: `The options object may have the following property to indicate behavior for\nother tags besides the \\`@param\\` tag (or the \\`@arg\\` tag if so set).`,\n        properties: {\n          tags: {\n            anyOf: [\n              {\n                patternProperties: {\n                  '.*': {\n                    enum: [\n                      'always', 'never',\n                    ],\n                    type: 'string',\n                  },\n                },\n                type: 'object',\n              },\n              {\n                enum: [\n                  'any',\n                ],\n                type: 'string',\n              },\n            ],\n            description: `Object whose keys indicate different tags to check for the\n  presence or absence of hyphens; the key value should be \"always\" or \"never\",\n  indicating how hyphens are to be applied, e.g., \\`{property: 'never'}\\`\n  to ensure \\`@property\\` never uses hyphens. A key can also be set as \\`*\\`, e.g.,\n  \\`'*': 'always'\\` to apply hyphen checking to any tag (besides the preferred\n  \\`@param\\` tag which follows the main string option setting and besides any\n  other \\`tags\\` entries).\n`,\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'layout',\n  },\n});\n"],"mappings":"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","ignoreList":[]}